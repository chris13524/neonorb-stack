use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.24
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'hook/admin/products/updated-changes.html.tmpl',
        'modtime' => '1422386282',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 9 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $stash->set('checkvotes', 0);
    $output .=  "\n";
#line 18 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, 'votesperuser', 0, 'defined', 0])) {
    $output .=  "\n  <p>\n  Updated votes per user from\n  ";
#line 14 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['changes', 0, 'votesperuser', 0, 0, 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " to\n  ";
#line 15 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'votesperuser', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n  </p>";
#line 17 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $stash->set('checkvotes', 1);
    }
    
    $output .=  "\n";
#line 27 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, 'maxvotesperbug', 0, 'defined', 0])) {
    $output .=  "\n  <p>\n  Updated maximum votes per ";
#line 22 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " from\n  ";
#line 23 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['changes', 0, 'maxvotesperbug', 0, 0, 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " to\n  ";
#line 24 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'maxvotesperbug', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n  </p>";
#line 26 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $stash->set('checkvotes', 1);
    }
    
    $output .=  "\n";
#line 36 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, 'votestoconfirm', 0, 'defined', 0])) {
    $output .=  "\n  <p>\n  Updated number of votes needed to confirm a ";
#line 31 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " from\n  ";
#line 32 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['changes', 0, 'votestoconfirm', 0, 0, 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " to\n  ";
#line 33 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['product', 0, 'votestoconfirm', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n  </p>";
#line 35 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $stash->set('checkvotes', 1);
    }
    
    $output .=  "\n\n";
    $output .=  "\n";
#line 90 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get('checkvotes')) {
    $output .=  "\n  <hr>\n\n  <p>Checking existing votes in this product for anybody who now\n  has too many votes for ";
#line 46 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'abug', 0]);
    $output .=  "...<br>";
#line 55 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, '_too_many_votes', 0, 'size', 0])) {
#line 52 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['changes', 0, '_too_many_votes', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'detail'} = $_tt_value;
    $output .=  "\n      &rarr;removed votes for ";
#line 49 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " <a href=\"show_bug.cgi?id=";
#line 50 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('uri')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 51 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a> from ";
#line 51 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "<br>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
    $output .=  "\n    &rarr;there were none.";
    }
    
    $output .=  "\n  </p>\n\n  <p>Checking existing votes in this product for anybody\n  who now has too many total votes...<br>";
#line 68 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, '_too_many_total_votes', 0, 'size', 0])) {
#line 65 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['changes', 0, '_too_many_total_votes', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'detail'} = $_tt_value;
    $output .=  "\n      &rarr;removed votes for ";
#line 62 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " <a href=\"show_bug.cgi?id=";
#line 63 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('uri')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 64 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a> from ";
#line 64 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['detail', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "<br>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
    $output .=  "\n    &rarr;there were none.";
    }
    
    $output .=  "\n  </p>\n\n  <p>Checking unconfirmed ";
#line 71 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " in this product for any which now have\n  sufficient votes...<br>";
#line 87 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    if ($stash->get(['changes', 0, '_confirmed_bugs', 0, 'size', 0])) {
#line 84 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['changes', 0, '_confirmed_bugs', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'id'} = $_tt_value;
    $output .=  "\n\n      ";
#line 78 "extensions/Voting/template/en/default/hook/admin/products/updated-changes.html.tmpl"
    $output .=  $context->include('bug/process/results.html.tmpl', { 'type' => 'votes', 'header_done' => 1, 'sent_bugmail' => $stash->get(['changes', 0, '_confirmed_bugs_sent_bugmail', 0, $stash->get('id'), 0]), 'id' => $stash->get('id') });;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
    $output .=  "\n    &rarr;there were none.";
    }
    
    $output .=  "\n  </p>\n";
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
